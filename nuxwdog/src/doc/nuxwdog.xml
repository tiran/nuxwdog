<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
]>

<refentry id="nuxwdog">

  <refentryinfo>
    <date>November 29, 2010</date>
    <title>PKI Tools</title>
    <productname>nuxwdog</productname>
    <productnumber>1</productnumber>
  </refentryinfo>

  <refmeta>
    <refentrytitle>nuxwdog</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>nuxwdog</refname>
    <refpurpose>Provides a simple watchdog process that can be used to start, stop, monitor, or reconfigure a server process.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>nuxwdog</command>
      <arg choice="plain">-f <replaceable>configuration_file</replaceable></arg>
      <arg choice="opt">-i</arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1 id="description">
    <title>Description</title>
	<para>
		<command>nuxwdog</command> is a watchdog daemon that builds on the <command>uxwdog</command> service that is part of the Netscape Enterprise Server (NES). 
		<command>nuxwdog</command> can start, stop, monitor, and reconfigure server programs, depending on the parameters passed to it in its configuration file. 
		<command>nuxwdog</command> opens a Unix domain socket to accept requests from any server process it is managing. Optionally, <command>nuxwdog</command> can be configured to communicate only with clients that are descendants of the <command>nuxwdog</command> process, limiting an avenue of potential access to any servers managed by the watchdog.
	</para>
	<para>
		Some servers require a high-level of security to protect their data or operations, which means (for example) that they cannot store plaintext passwords in a password file to allow the server to be started automatically. <command>nuxwdog</command> can be configured to prompt for server passwords when a server first starts and then caches those passwords so that <command>nuxwdog</command> can restart the server without intervention if the server crashes. 
	</para>
	<para>
		To make it easy for clients to communicate with <command>nuxwdog</command>, a C/C++ shared library is provided with the <command>nuxwdog</command> source code (<filename>libnuxwdog.so</filename>). Additionally, <command>nuxwdog</command> provides JNI interfaces and Perl bindings to the <filename>libnuxwdog.so</filename> library, so that calls can be made from Java and Perl programs. For more information on this library and the client interfaces, see <ulink url="https://fedorahosted.org/nuxwdog/wiki/HOWTO">https://fedorahosted.org/nuxwdog/wiki/HOWTO</ulink>.


	</para>
	<para>
		<command>nuxwdog</command> is used by Dogtag PKI to monitor and manage the subsystem server processes for Java, Tomcat, and Apache servers.
	</para>

  </refsect1>
  
  <refsect1 id="options">
    <title>Options</title>
    <variablelist>
      <varlistentry>
        <term>-f <emphasis>configuration_file</emphasis></term>
        <listitem><para>Passes the configuration file for the service which runs the subsystem. <emphasis>With Dogtag PKI.</emphasis> For the CA, OCSP, TKS, and DRM, this is for the Java process. For the TPS, this is for the Apache process.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term>-i</term>
        <listitem><para>Runs the nuxwdog process in interactive mode and keeps nuxwdog open in the foreground instead of running it as a daemon in the background.</para></listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
  
  <refsect1 id="config-file-params">
    <title>Configuration File Parameters and Examples</title>
    <variablelist>
      <varlistentry>
        <term>ExeFile</term>
        <listitem><para>Gives the full path to the executable to be started.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term>ExeArgs</term>
        <listitem><para>Passes any arguments to the executable. The first argument must be the full path to the executable (the same as the value in <option>ExeFile</option>).</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>TmpDir</term>
        <listitem><para>Gives the full path to the executable to be started.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>ChildSecurity</term>
        <listitem><para>Sets whether the child server process should only allow requests from a parent (where <command>nuxwdog</command> 
	is the parent). <command>nuxwdog</command> checks the process ID for any client which sends a request to the Unix domain socket 
	and drops any message where the client is not a descendant of the <command>nuxwdog</command> process.
	To allow any request, set this to <command>0</command>; to allow only parent or ancestor requests, sets this to <command>1</command>. </para></listitem>
      </varlistentry>
      <varlistentry>
        <term>ExeOut</term>
        <listitem><para>Gives the file to write stdout for the server to be started.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>ExeErr</term>
        <listitem><para>Gives the file to write stderr for the server to be started.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>ExeBackground</term>
        <listitem><para>Sets whether to run the server and the <command>nuxwdog</command> processes in the background in daemon mode after the watchdog is initialized. Setting this to <command>1</command> enables daemon mode, while <command>0</command> keeps this in the foreground.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>PidFile</term>
        <listitem><para>Gives the PID file to use to store the <command>nuxwdog</command> PID.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>ChildPidFile</term>
        <listitem><para>Gives the PID file to use to store the PID of the server process managed by <command>nuxwdog</command>.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>ExeContext</term>
        <listitem><para>Sets the SELinux context in which to start the server process.</para></listitem>
      </varlistentry>

    </variablelist>

	<para>
		<command>nuxwdog</command> can be used to manage many types of server processes. For Dogtag PKI, it manages Java, Tomcat, and Apache servers. For the Dogtag PKI Certificate Authority, a Java-based subsystem with a Tomcat web service, the configuration file identifies the appropriate JRE and class paths, along with setting the output, error, and PID files. (The <parameter>ExeArgs</parameter> argument should be all on one line.)
	</para>
<programlisting>ExeFile /usr/lib/jvm/jre/bin/java
ExeArgs /usr/lib/jvm/jre/bin/java  
        -Djava.endorsed.dirs=/usr/share/tomcat5/common/endorsed
        -classpath :/usr/lib/jvm/jre/lib/rt.jar
           :/usr/share/java/commons-collections.jar
           :/usr/share/tomcat5/bin/bootstrap.jar
           :/usr/share/tomcat5/bin/commons-logging-api.jar
           :/usr/share/java/mx4j/mx4j-impl.jar
           :/usr/share/java/mx4j/mx4j-jmx.jar
           :/usr/share/tomcat5/common/lib/nuxwdog.jar
        -Dcatalina.base=/var/lib/pki-ca2
        -Dcatalina.home=/usr/share/tomcat5
        -Djava.io.tmpdir=/usr/share/tomcat5/temp org.apache.catalina.startup.Bootstrap
        start
TmpDir /var/lib/pki-ca2/logs/pids 
ChildSecurity 1
ExeOut /var/lib/pki-ca2/logs/catalina.out
ExeErr /var/lib/pki-ca2/logs/catalina.out
ExeBackground 1
PidFile /var/lib/pki-ca2/logs/wd-pki-ca2.pid
ChildPidFile /var/run/pki-ca2.pid</programlisting>
	<para>
		For Dogtag PKI, the Token (smart card) Processing System uses an Apache-based server. This example also sets the SELinux context, <command>pki_tps_t</command>, used by the TPS subsystem processes.
	</para>
<programlisting>ExeFile /usr/sbin/httpd.worker
ExeArgs /usr/sbin/httpd.worker -f /etc/pki-tps1/httpd.conf
TmpDir /var/lib/pki-tps1/logs/pids
PidFile /var/lib/pki-tps1/logs/wd-pki-tps1.pid
ExeContext pki_tps_t</programlisting>
  </refsect1>

  <refsect1 id="resources">
    <title>Additional Resources</title>
	<para>
		There is a more detailed how-to article, including information on available client calls for <command>nuxwdog</command>, at <ulink url="https://fedorahosted.org/nuxwdog/wiki/HOWTO">https://fedorahosted.org/nuxwdog/wiki/HOWTO</ulink>.
	</para>
    <para>The <command>nuxwdog</command> server works in conjunction with the Dogtag PKI subsystems. The Dogtag PKI project wiki is at <ulink url="http://pki.fedoraproject.org/wiki/">http://pki.fedoraproject.org/wiki/</ulink>. </para>
	<para>For information specifically about <command>nuxwdog</command>, the <command>nuxwdog</command> project wiki is located at <ulink url="https://fedorahosted.org/nuxwdog/wiki">https://fedorahosted.org/nuxwdog/wiki/</ulink>. The <command>nuxwdog</command> relates directly to <command>nuxwdog</command> code changes and releases, rather than all PKI-related updates.</para>
	<para>Mailing lists: pki-devel@redhat.com and pki-users@redhat.com</para>
	<para>IRC: Freenode at #dogtag-pki</para>
  </refsect1>

<!-- fill in your name first; keep the other names for reference -->
  <refsect1 id="authors">
    <title>Authors</title>
    <para>The PKI tools were written and maintained by developers with Netscape and now with Red Hat.</para>
	<para>
		Authors: Ade Lee &lt;alee@redhat.com>, Deon Lackey &lt;dlackey@redhat.com>.
	</para>
  </refsect1>

<!-- don't change -->
  <refsect1 id="copyright">
    <title>Copyright</title>
    <para>(c) 2010, Red Hat, Inc. Licensed under the GNU Public License version 2.</para>
  </refsect1>
</refentry>
